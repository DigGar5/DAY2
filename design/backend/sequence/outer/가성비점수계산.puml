@startuml 가성비점수계산
!theme mono
title 온라인 핸드폰 구매 사이트 - 가성비 점수 계산 외부 시퀀스

actor "사용자" as User
participant "Frontend" as FE
participant "API Gateway" as Gateway
participant "Circuit Breaker" as CB
box "Score Service (CQRS)" #LightBlue
    participant "Score Service\n(Write Model)" as ScoreWrite
    participant "Score Service\n(Read Model)" as ScoreRead
end box
participant "Redis Cache" as Cache
participant "PostgreSQL\n(Score Write DB)" as ScoreWriteDB
participant "MongoDB\n(Score Read DB)" as ScoreReadDB
box "External APIs" #LightYellow
    participant "외부 가격 API" as PriceAPI
    participant "외부 리뷰 API" as ReviewAPI
    participant "외부 성능 API" as SpecAPI
end box

== UFR-SCOR-010: 가성비계산 (5초 이내) ==

User -> FE: 핸드폰 가성비 점수 요청
activate FE

FE -> Gateway: GET /api/v1/phones/{phoneId}/score
activate Gateway

Gateway -> CB: 점수 계산 요청
activate CB
note right of CB: Timeout: 5초\nFallback: 캐시된 점수

CB -> ScoreWrite: calculateScore(phoneId)
activate ScoreWrite

== UFR-SCOR-020: 실시간정보반영 ==

ScoreWrite -> Cache: get cached data(phoneId)
activate Cache
Cache --> ScoreWrite: cached data or null
deactivate Cache

alt Cache Miss 또는 Data Expired (5분)
    
    par 외부 API 병렬 호출 (3초 타임아웃)
        ScoreWrite -> PriceAPI: 최신 가격 정보 요청
        activate PriceAPI
        PriceAPI --> ScoreWrite: 가격 정보 (1-2초)
        deactivate PriceAPI
    and
        ScoreWrite -> ReviewAPI: 최신 리뷰 정보 요청
        activate ReviewAPI
        ReviewAPI --> ScoreWrite: 리뷰 평점/개수 (1-2초)
        deactivate ReviewAPI
    and
        ScoreWrite -> SpecAPI: 성능 정보 요청
        activate SpecAPI
        SpecAPI --> ScoreWrite: 성능 점수 (1-2초)
        deactivate SpecAPI
    end par
    
    ScoreWrite -> ScoreWrite: 가성비 점수 계산\n(가격 40% + 리뷰 30% + 성능 30%)
    
    ScoreWrite -> ScoreWriteDB: INSERT score_calculation\n(phoneId, score, factors, timestamp)
    activate ScoreWriteDB
    ScoreWriteDB --> ScoreWrite: 저장 완료
    deactivate ScoreWriteDB
    
    ScoreWrite -> Cache: cache score data (TTL: 5분)
    activate Cache
    Cache --> ScoreWrite: 캐시 완료
    deactivate Cache
    
    ScoreWrite -> ScoreRead: publishScoreCalculated(scoreData)
    activate ScoreRead
    
    ScoreRead -> ScoreReadDB: UPSERT score_view\n(phoneId, score, details, calculatedAt)
    activate ScoreReadDB
    ScoreReadDB --> ScoreRead: 업데이트 완료
    deactivate ScoreReadDB
    
    deactivate ScoreRead

else Cache Hit
    ScoreWrite -> ScoreWrite: 캐시된 점수 반환
end

ScoreWrite --> CB: 가성비 점수 결과
deactivate ScoreWrite

alt 성공 응답
    CB --> Gateway: score response
else 타임아웃 또는 실패
    CB -> Cache: get fallback data
    activate Cache
    Cache --> CB: 이전 점수 (24시간 내)
    deactivate Cache
    CB --> Gateway: fallback score + warning
end

deactivate CB

Gateway --> FE: {score: 85, priceScore: 90, reviewScore: 80, specScore: 85, calculatedAt: "2024-12-25T10:00:00Z"}
deactivate Gateway

FE --> User: 가성비 점수 85점 표시
deactivate FE

== UFR-SCOR-030: 점수상세조회 ==

User -> FE: 점수 상세 분석 요청
activate FE

FE -> Gateway: GET /api/v1/phones/{phoneId}/score/details
activate Gateway

Gateway -> ScoreRead: getScoreDetails(phoneId)
activate ScoreRead

ScoreRead -> ScoreReadDB: SELECT * FROM score_view WHERE phone_id = ?
activate ScoreReadDB
ScoreReadDB --> ScoreRead: 상세 점수 데이터
deactivate ScoreReadDB

ScoreRead --> Gateway: {score: 85, breakdown: {...}, factors: {...}, methodology: "..."}
deactivate ScoreRead

Gateway --> FE: 상세 점수 분석
deactivate Gateway

FE --> User: 점수 계산 근거 및 상세 분석 표시
deactivate FE

== UFR-SCOR-040: 점수이력확인 (30일) ==

User -> FE: 점수 변화 추이 요청
activate FE

FE -> Gateway: GET /api/v1/phones/{phoneId}/score/history?days=30
activate Gateway

Gateway -> ScoreRead: getScoreHistory(phoneId, 30days)
activate ScoreRead

ScoreRead -> ScoreReadDB: SELECT * FROM score_history\nWHERE phone_id = ? AND calculated_at >= ?
activate ScoreReadDB
ScoreReadDB --> ScoreRead: 30일간 점수 이력
deactivate ScoreReadDB

ScoreRead --> Gateway: [{date: "...", score: 85, factors: {...}}, ...]
deactivate ScoreRead

Gateway --> FE: 점수 변화 추이 데이터
deactivate Gateway

FE --> User: 30일간 점수 변화 그래프 표시
deactivate FE

note over User, SpecAPI
**성능 보장 전략:**
1. Circuit Breaker: 5초 타임아웃, 실패 시 캐시 fallback
2. 외부 API 병렬 호출: 3초 내 완료
3. Redis 캐시: 5분 TTL, 24시간 fallback
4. CQRS: 읽기/쓰기 분리로 조회 성능 최적화
5. 비동기 이벤트: Write → Read 모델 동기화

**점수 계산 공식:**
- 가성비 점수 = (가격점수 × 0.4) + (리뷰점수 × 0.3) + (성능점수 × 0.3)
- 각 요소는 0-100점 정규화
end note

@enduml