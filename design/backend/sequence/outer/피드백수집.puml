@startuml 피드백수집
!theme mono

title 온라인 핸드폰 구매 사이트 - 피드백 수집 외부 시퀀스

participant "Frontend\n(사용자)" as FE
participant "API Gateway" as AGW
participant "Feedback Service" as FEED
participant "Content Filter\nService" as FILTER
participant "Analytics Service" as ANALYTICS
participant "Redis Cache" as CACHE
participant "PostgreSQL\n(FeedbackDB)" as DB

== 1. 만족도 평가 ==

FE -> AGW : POST /api/v1/feedback/satisfaction\n{userId, productId, gaSeongBiScore, \nrecommendScore, anonymous}
AGW -> FEED : POST /feedback/satisfaction\n{userId, productId, gaSeongBiScore, \nrecommendScore, anonymous}

FEED -> CACHE : GET cache:user:{userId}
CACHE --> FEED : 사용자 정보 (구매이력, 평가횟수)

alt 정상 평가 범위 (1-5점)
    FEED -> DB : INSERT satisfaction_ratings\n(user_id, product_id, gaseongbi_score, \nrecommend_score, is_anonymous, created_at)
    DB --> FEED : 저장 완료
    
    FEED -> ANALYTICS : POST /analytics/feedback\n{type: "satisfaction", userId, \nproductId, scores}
    ANALYTICS --> FEED : 분석 데이터 전송 완료
    
    FEED -> CACHE : SET cache:user:{userId}:feedback_count\n+1
    
    FEED --> AGW : 200 OK\n{message: "만족도 평가 완료", \npoints: 50}
    AGW --> FE : 200 OK\n{message: "만족도 평가 완료", \npoints: 50}
else 잘못된 점수 범위
    FEED --> AGW : 400 Bad Request\n{error: "점수는 1-5점 사이여야 합니다"}
    AGW --> FE : 400 Bad Request\n{error: "점수는 1-5점 사이여야 합니다"}
end

== 2. 개선 제안 ==

FE -> AGW : POST /api/v1/feedback/suggestion\n{userId, category, title, content, \nattachments, anonymous}
AGW -> FEED : POST /feedback/suggestion\n{userId, category, title, content, \nattachments, anonymous}

FEED -> CACHE : GET cache:user:{userId}
CACHE --> FEED : 사용자 정보

== 2.1 부적절 내용 필터링 ==

FEED -> FILTER : POST /filter/content\n{title, content}
FILTER -> FILTER : AI 기반 텍스트 분석\n(욕설, 스팸, 부적절 내용 검사)

alt 적절한 내용
    FILTER --> FEED : 200 OK\n{status: "clean", confidence: 0.95}
    
    FEED -> DB : INSERT feedback_suggestions\n(user_id, category, title, content, \nfilter_status: "approved", \nis_anonymous, created_at)
    DB --> FEED : 저장 완료
    
    FEED -> ANALYTICS : POST /analytics/feedback\n{type: "suggestion", userId, \ncategory, sentiment}
    ANALYTICS --> FEED : 분석 완료
    
    alt 첫 번째 제안인 경우
        FEED -> CACHE : SET cache:user:{userId}:first_suggestion\ntrue
        note right : 첫 제안 시 추가 포인트
    end
    
    FEED --> AGW : 201 Created\n{message: "개선 제안이 등록되었습니다", \nfeedbackId, points: 100}
    AGW --> FE : 201 Created\n{message: "개선 제안이 등록되었습니다", \nfeedbackId, points: 100}
    
else 부적절한 내용 감지
    FILTER --> FEED : 400 Bad Request\n{status: "filtered", \nreason: "부적절한 표현 포함"}
    
    FEED -> DB : INSERT feedback_suggestions\n(user_id, category, title, content, \nfilter_status: "rejected", \nfilter_reason, is_anonymous, created_at)
    
    FEED --> AGW : 400 Bad Request\n{error: "부적절한 내용이 포함되어 있습니다", \ndetail: "서비스 이용 규칙을 확인해 주세요"}
    AGW --> FE : 400 Bad Request\n{error: "부적절한 내용이 포함되어 있습니다", \ndetail: "서비스 이용 규칙을 확인해 주세요"}
end

== 3. 피드백 포인트 적립 ==

opt 정상 피드백 등록된 경우
    FEED -> AGW : POST /api/v1/users/{userId}/points\n{amount, reason, source: "feedback"}
    AGW -> "User Service" as USER : POST /users/{userId}/points\n{amount, reason, source}
    USER -> "User DB" as UDB : UPDATE users SET points = points + amount
    UDB --> USER : 포인트 적립 완료
    USER --> AGW : 200 OK {newBalance}
    AGW --> FEED : 200 OK {newBalance}
    
    FEED -> CACHE : SET cache:user:{userId}:points\nnewBalance, TTL: 300
end

== 4. 실시간 알림 (선택) ==

opt 관리자 알림 필요한 경우 (긴급 제안 등)
    FEED -> "Notification Service" as NOTI : POST /notify/admin\n{type: "urgent_feedback", \nfeedbackId, priority: "high"}
    NOTI --> FEED : 알림 전송 완료
end

note over FE, DB
    **포인트 정책:**
    - 만족도 평가: 50포인트
    - 개선 제안: 100포인트 
    - 첫 번째 제안: 추가 50포인트
    - 익명 평가도 포인트 적립 (단, 사용자 확인 필요)
    
    **필터링 정책:**
    - AI 기반 실시간 필터링
    - 의심 내용은 관리자 검토 대기
    - 반복 위반 시 제재 조치
end

@enduml